name: Deploy Spring Boot to ECR and EC2

on:
  push:
    branches: [main, dev, feature/infra-setting]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::065676097951:role/gitActionsRole
          aws-region: ap-northeast-2
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Grant execute permissions to gradlew
        run: chmod +x ./gradlew

      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: colorful-stabucks-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin 065676097951.dkr.ecr.ap-northeast-2.amazonaws.com

            CONTAINER_ID=$(sudo docker ps -q --filter "name=colorful-stabucks-backend")
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi

            sudo docker container prune -f

            sudo docker image prune -a -f --filter "until=24h"

            sudo docker network create app-network || true

            sudo docker network connect app-network redis || true

            sudo docker pull 065676097951.dkr.ecr.ap-northeast-2.amazonaws.com/colorful-stabucks-backend:latest

            sudo docker run --name colorful-stabucks-backend -d -p 8080:8080 \
            --network app-network \
            -e TZ=Asia/Seoul \
            065676097951.dkr.ecr.ap-northeast-2.amazonaws.com/colorful-stabucks-backend:latest